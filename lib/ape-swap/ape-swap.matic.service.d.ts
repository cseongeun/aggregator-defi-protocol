import { BigNumber, Contract } from 'ethers';
import { Farm } from '@libs/repository/farm/entity';
import { AbiService } from '../../abi/abi.service';
import { NetworkService } from '../../network/network.service';
import { ProtocolService } from '../../protocol/protocol.service';
import { TokenService } from '../../token/token.service';
import { Provider } from '@ethersproject/providers';
declare const ApeSwapMATICService_base: any;
export declare class ApeSwapMATICService extends ApeSwapMATICService_base {
    readonly networkService: NetworkService;
    readonly protocolService: ProtocolService;
    readonly tokenService: TokenService;
    readonly abiService: AbiService;
    name: any;
    chainType: any;
    chainId: any;
    constants: any;
    constructor(networkService: NetworkService, protocolService: ProtocolService, tokenService: TokenService, abiService: AbiService);
    getFarmsByAddress(farms: Farm[], address: string): Promise<any>;
    get provider(): Provider;
    get farmName(): string;
    get farmAddress(): string;
    get farmAbi(): any[];
    get farmContract(): Contract;
    get farmRewarderName(): string;
    get farmRewarderSampleAddress(): string;
    get farmRewarderAbi(): any[];
    farmRewarderContract(address: string): Contract;
    get farm2Name(): string;
    get farm2Address(): string;
    get farm2Abi(): any[];
    get farm2Contract(): Contract;
    get farm2StratSampleAddress(): string;
    get farm2StratAbi(): any[];
    farm2StratContract(address: string): Contract;
    get dexFactoryAddress(): string;
    get dexFactoryInitCodeHash(): string;
    get dexFactoryAbi(): any[];
    get dexFactoryContract(): Contract;
    getFarmTotalLength(): Promise<BigNumber>;
    getFarmTotalAllocPoint(): Promise<BigNumber>;
    getFarmRewardPerBlock(): Promise<any>;
    getFarmRewardPerSecond(): Promise<BigNumber>;
    getFarmRewarderRewardToken(address: string): Promise<string>;
    getFarmRewarderRewardPerSecond(address: string): Promise<BigNumber>;
    getFarmInfos(pids: number[]): Promise<{
        lpToken: string;
        allocPoint: BigNumber;
        rewarder: string;
    }[]>;
    getDEXFactoryTotalLength(): Promise<BigNumber>;
    getDEXFactoryInfos(pids: number[]): Promise<string[]>;
    private _trackingFarmsByAddress;
    private _formatFarmResult;
}
export {};
